
머신러닝/3장 - 선형 회귀

3-1 k-최근접 이웃 회귀

무언가를 고르는게 아닌  예측해야 한다면 어떻게 해야할까?

'회귀' (Regression)를 통해 해결 할 수 있다.

지도학습 알고리즘은 크게 분류와 회귀로 나뉜다.

회귀는  임의의 숫자를 예측하는 역할을 한다.


# k-최근접 이웃 회귀
k-최근접 이웃 회귀란 

k 최근접 이웃과 같이 기준 샘플과 비교한 후 샘플들의 평균값을 출력하는 알고리즘이다.

도미,빙어 데이터를 통해서 우선 산점도를 그려보자.

perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
       21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
       23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
       27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
       39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
       44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])

길이와 무게가 비례하는 모습 !

from sklearn.model_selection import train_test_split

train_input, test_input, train_target, test_target = 
train_test_split(perch_length, perch_weight, random_state=42) --> 훈련 세트 42개 뽑기
train_test_split() 메소드를 사용해 랜덤으로 훈련/테스트세트의  입력/정답 데이터를 나누어 준다. (총 4개)

 

# 위에서 perch_length와 perch_weight는 1차원 np배열이므로 2차원으로 바꿔줘야한다! 

 

train_input = train_input.reshape(-1,1)			# reshape(-1 = 나머지 원소 개수로 모두 채우라는 뜻)
test_input = test_input.reshape(-1,1)
print(train_input.shape, test_input.shape)
(42,1) (14,1)
# reshape()의 '-1'이 의미하는 바는, 변경된 배열의 '-1' 위치의 차원은 "원래 배열의 길이와 남은 차원으로 부터 추정"


나머지 원소 개수로 모두 채우라는 의미 ! (총 원소 개수 모르거나 쓰기 귀찮을 때 사용하면 유용)

 

 # 결정계수(R^2)

from sklearn.neighbors import KNeighborsRegressor

knr = KNeighborsRegressor()
knr.fit(train_input, train_target)
print(knr.score(test_input, test_target))

0.99289
결정계수 공식 


예측이 타겟에 가까워지면 1에 가까워지고 / 타깃의 평균 정도를 예측하는 수준이면 0에 가까워진다.

 

 

# 과대적합 VS 과소적합
훈련 세트에서 점수가 좋았는데 테스트 세트에서는 점수가 나쁘다면 모델이 훈련 세트에 과대적합 되었다고 말한다.

반대로 훈련 세트보다 테스트 세트의 점수가 높거나 두 점수가 모두 너무 낮은 경우는 과소적합 되었다고 말한다.

 

if > 과소적합일 경우,

모델을 더 복잡하게 만들어야 한다.

k-최근접 이웃 알고리즘의 경우, 기준 샘플 수를 줄이는 방법이 있다. 

(샘플 많아질수록 일반적인 패턴을 가지기 때문)


3 - 2 선형회귀

회귀에 의해 무게를 예측하는 알고리즘을 사용해, 50cm의 농어를 이용해 무게를 예측해보자.


데이터를 준비

perch_length = np.array([8.4, 13.7, 15.0, 16.2, 17.4, 18.0, 18.7, 19.0, 19.6, 20.0, 21.0,
       21.0, 21.0, 21.3, 22.0, 22.0, 22.0, 22.0, 22.0, 22.5, 22.5, 22.7,
       23.0, 23.5, 24.0, 24.0, 24.6, 25.0, 25.6, 26.5, 27.3, 27.5, 27.5,
       27.5, 28.0, 28.7, 30.0, 32.8, 34.5, 35.0, 36.5, 36.0, 37.0, 37.0,
       39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 42.0, 43.0, 43.0, 43.5,
       44.0])
perch_weight = np.array([5.9, 32.0, 40.0, 51.5, 70.0, 100.0, 78.0, 80.0, 85.0, 85.0, 110.0,
       115.0, 125.0, 130.0, 120.0, 120.0, 130.0, 135.0, 110.0, 130.0,
       150.0, 145.0, 150.0, 170.0, 225.0, 145.0, 188.0, 180.0, 197.0,
       218.0, 300.0, 260.0, 265.0, 250.0, 250.0, 300.0, 320.0, 514.0,
       556.0, 840.0, 685.0, 700.0, 700.0, 690.0, 900.0, 650.0, 820.0,
       850.0, 900.0, 1015.0, 820.0, 1100.0, 1000.0, 1100.0, 1000.0,
       1000.0])
훈련세트, 테스트세트로 나누고 2차원배열로 바꾸기

from sklearn.model_selection import train_test_split
train_input,test_input,train_target,test_target = train_test_split(perch_length,perch_weight,random_state=42)

train_input = train_input.reshape(-1,1)
test_input = test_input.reshape(-1,1)
k-최근접 이웃 알고리즘 사용 ( 기준 샘플수 = 3 )

from sklearn.neighbors import KNeighborsRegressor
knr = KNeighborsRegressor(n_neighbors = 3)
knr.fit(train_input,train_target)
예측 실행

knr.predict([[50]])

1010.
길이가 압도적으로 길지만 무게는 크지않다. 

그림으로 그려보자...

distances, indexes = knr.kneighbors([[50]])


plt.scatter(train_input,train_target)
plt.scatter(50,1010,marker='^')
plt.scatter(train_input[indexes],train_target[indexes], marker='D')
plt.show()

k-최근접 이웃 모델의 한계점 (평균)

이렇게 되면 농어가 100cm , 150cm, 1km여도 여전히 1033.333으로 수렴한다.

이 방법을 해결하기 위해선 예측할 데이터의 범위가 주어진 데이터 내의 값 사이에 있어야 한다.

 

다른 방법, 다른 알고리즘은 없을까? 

 

선형 회귀
선형 회귀 ( linear regression )는 널리 사용되는 대표적인 회귀 알고리즘이다. 간단하고 성능이 뛰어남.

이름과 같이 특성이 하나인 경우 어떤 직선을 학습하는 알고리즘이다.!

 

 

from sklearn.linear_model import LinearRegression
lr = LinearRegression()

lr.fit(train_input, train_target)
print(lr.predict([[50]]))

[1241.83860323]
확실히 k-최근접 이웃 알고리즘보다 비교적 정확한 값을 도출해낸다.

 

보다 깊게 들여다보자.

 

선형 회귀는 y = ax + b 처럼  쓸 수 있다.

 x = 길이

 y = 무게

a(기울기) 와 b(y절편)은 lr 객체의 coef_ 와 intercept_속성에 저장되어 있다.

print( lr.coef_)
print( lr.intercept_ )

[39.01714496]
-709.0186449535477
농어의 길이 15에서 50까지 직선으로 그려보자 (기울기와 절편을 이용하여)

# hint( 15,y1 ) 과 (50,y2)의 값을 직선으로 긋기

plt.scatter(train_input,train_train_target) 	                                   # 데이터
plt.plot([15,50], [15 * lr.coef_ + lr.intercept_ , 50 * lr.coef_ + lr.intercept_]) # 직선
plt.scatter( 50 , 1241.8,marker='^')                                                  # 예측데이터

R^2 또한 확인해보자!

lr.score(train_input,train_target)
lr.score(test_input,test_target)

0.939846333997604
0.8247503123313558
과대적합vs과소적합?  훈련 > 테스트이므로 과대적합되었다고 볼 수 있다.

+ 하나의 문제점 

위의 그래프 상 x가 양수(작은 수이라 할 지라도) 임에도 무게가 음수가 나올 수 있다.

직선이라서 문제가 되는것 같은데 곡선으로 만들어야 할 것 같다.

 

다항 회귀
곡선 = 2차 방정식 => 길이를 제곱한 항이 훈련 세트에 추가되어야 한다. (넘파이를 이용)


다음처럼 농어의 길이를 제곱해서 원래 데이터 앞에 붙여보자.

 

# hint: column_stack() 함수 이용

train_poly = np.column_stack((train_input ** 2 , train_input))
test_poly = np.column_stack((test_input**2 ,test_input))
데이터셋 확인해보자. (브로드캐스팅 되었나 확인)

print(train_poly.shape, test_poly.shape)
(42, 2) (14, 2)
원래 특성인 길이를 제곱하여 왼쪽 열에 추가했기 때문에 훈련 세트와 테스트 세트 모두 열이 2개로 늘어난 것을 확인할 수 있다.


